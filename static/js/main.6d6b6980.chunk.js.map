{"version":3,"sources":["components/Medal.jsx","components/Country.jsx","components/NewCountry.jsx","App.js","reportWebVitals.js","index.js"],"names":["Medal","state","this","props","medal","country","onIncrement","onDecrement","className","name","page_value","saved_value","onClick","id","disabled","Component","Country","medals","onDelete","onSave","onReset","sum","forEach","getMedalsTotal","map","unsaved","renderSaveButton","Fragment","style","marginLeft","NewCountry","handleClick","prompt","trim","length","onAdd","App","apiEndpoint","useState","countries","setCountries","useRef","useEffect","a","axios","get","fetchedCountries","data","newCountries","newCountry","current","count","push","fetchCountries","handleAdd","post","concat","handleDelete","countryId","originalCountries","filter","c","delete","response","status","console","log","alert","handleSave","idx","findIndex","mutableCountries","jsonPatch","op","path","value","JSON","stringify","patch","handleReset","handleIncrement","medalName","handleUpdate","handleDecrement","factor","reduce","b","getAllMedalsTotal","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6d6b6980.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Medal extends Component {\r\n  state = {  }\r\n  render() { \r\n    const { medal, country, onIncrement, onDecrement } = this.props;\r\n    return (\r\n      <div className=\"medals\">\r\n        { \r\n        ( country[medal.name].page_value !== country[medal.name].saved_value) ?\r\n          <span className=\"delta\">{medal.name} Medals: {country[medal.name].page_value}</span>\r\n        :\r\n          <span>{medal.name} Medals: {country[medal.name].page_value}</span>\r\n        }\r\n        <button onClick={ () => onIncrement(country.id, medal.name) }>+</button>\r\n        <button disabled={ country[medal.name].page_value === 0 } onClick={ () => onDecrement(country.id, medal.name) }>-</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Medal;","import React from 'react';\r\nimport Medal from './Medal';\r\n\r\nconst Country = (props) => {\r\n  const { country, medals, onIncrement, onDecrement, onDelete, onSave, onReset } = props;\r\n\r\n  const getMedalsTotal = (country, medals) => {\r\n    let sum = 0;\r\n    medals.forEach(medal => { sum += country[medal.name].page_value; });\r\n    return sum;\r\n  }\r\n  const renderSaveButton = () => {\r\n    let unsaved = false;\r\n    medals.forEach(medal => {\r\n      if (country[medal.name].page_value !== country[medal.name].saved_value) {\r\n        unsaved = true;\r\n      }\r\n    });\r\n    return unsaved;\r\n  }\r\n  return (\r\n    <div className=\"country\">\r\n      <div className=\"name\">\r\n        { country.name }\r\n        <span className=\"badge\">\r\n          { getMedalsTotal(country, medals) }\r\n        </span>\r\n      </div>\r\n      { medals.map(medal =>\r\n        <Medal \r\n          key={ medal.id } \r\n          country={ country } \r\n          medal={ medal } \r\n          onIncrement={ onIncrement } \r\n          onDecrement={ onDecrement } />\r\n      ) }\r\n      { renderSaveButton() ?\r\n        <React.Fragment>\r\n          <button style={{marginLeft:'8px'}} onClick={ () => onSave(country.id) }>save</button>\r\n          <button style={{marginLeft:'8px'}} onClick={ () => onReset(country.id) }>reset</button>\r\n        </React.Fragment>\r\n        :\r\n        <button onClick={() => onDelete(country.id)}>delete</button>\r\n      }\r\n      <hr />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Country;","import React, { Component } from 'react';\r\n\r\nclass NewCountry extends Component {\r\n  state = {  }\r\n  handleClick = () => {\r\n    const name = prompt('Enter country name');\r\n    if (name && name.trim().length > 0) {\r\n      this.props.onAdd(name);\r\n    }\r\n  }\r\n  render() { \r\n    return (\r\n      <div className='newCountryButton'>\r\n        <button onClick={ this.handleClick }>New Country</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NewCountry;","import React, { useState, useEffect, useRef } from 'react';\nimport axios from 'axios'\nimport Country from './components/Country';\nimport NewCountry from './components/NewCountry';\nimport './App.css';\n\nconst App = () => {\n  const apiEndpoint = 'https://medal-api.azurewebsites.net/Api/country'\n  const [ countries, setCountries ] = useState([]);\n  const medals = useRef([\n    { id: 1, name: 'gold' },\n    { id: 2, name: 'silver' },\n    { id: 3, name: 'bronze' },\n  ]);\n\n  useEffect(() => {\n    async function fetchCountries() {\n      const {data : fetchedCountries} = await axios.get(apiEndpoint);\n      let newCountries = [];\n      fetchedCountries.forEach(country => {\n        let newCountry = {\n          id: country.id,\n          name: country.name,\n        };\n        medals.current.forEach(medal => {\n          const count = country[medal.name];\n          newCountry[medal.name] = { page_value: count, saved_value: count };\n        });\n        newCountries.push(newCountry);\n      });\n      setCountries(newCountries);\n    }\n    fetchCountries();\n  }, []);\n\n  const handleAdd = async (name) => {\n    const { data: post } = await axios.post(apiEndpoint, { name: name });\n    let newCountry = { \n      id: post.id, \n      name: post.name,\n    };\n    medals.current.forEach(medal => {\n      const count = post[medal.name];\n      newCountry[medal.name] = { page_value: count, saved_value: count };\n    });\n    setCountries(countries.concat(newCountry));\n  }\n\n  const handleDelete = async (countryId) => {\n    const originalCountries = countries;\n    setCountries(countries.filter(c => c.id !== countryId));\n    try {\n      await axios.delete(`${apiEndpoint}/${countryId}`);\n    } catch (ex) {\n      if (ex.response && ex.response.status === 404) {\n        console.log(\"The record does not exist - it may have already been deleted\");\n      } else { \n        alert('An error occurred while deleting');\n        setCountries(originalCountries);\n      }\n    }\n  }\n\n  const handleSave = async (countryId) => {\n    const originalCountries = countries;\n\n    const idx = countries.findIndex(c => c.id === countryId);\n    const mutableCountries = [ ...countries ];\n    const country = mutableCountries[idx];\n    let jsonPatch = [];\n    medals.current.forEach(medal => {\n      if (country[medal.name].page_value !== country[medal.name].saved_value) {\n        jsonPatch.push({ op: \"replace\", path: medal.name, value: country[medal.name].page_value });\n        country[medal.name].saved_value = country[medal.name].page_value;\n      }\n    });\n    console.log(`json patch for id: ${countryId}: ${JSON.stringify(jsonPatch)}`);\n    // update state\n    setCountries(mutableCountries);\n\n    try {\n      await axios.patch(`${apiEndpoint}/${countryId}`, jsonPatch);\n    } catch (ex) {\n      if (ex.response && ex.response.status === 404) {\n        // country already deleted\n        console.log(\"The record does not exist - it may have already been deleted\");\n      } else { \n        alert('An error occurred while updating');\n        setCountries(originalCountries);\n      }\n    }\n  }\n  const handleReset = (countryId) => {\n    const idx = countries.findIndex(c => c.id === countryId);\n    const mutableCountries = [ ...countries ];\n    const country = mutableCountries[idx];\n    medals.current.forEach(medal => {\n      country[medal.name].page_value = country[medal.name].saved_value;\n    });\n    setCountries(mutableCountries);\n  }\n\n  const handleIncrement = (countryId, medalName) => handleUpdate(countryId, medalName, 1);\n  const handleDecrement = (countryId, medalName) => handleUpdate(countryId, medalName, -1);\n  const handleUpdate = (countryId, medalName, factor) => {\n    const idx = countries.findIndex(c => c.id === countryId);\n    const mutableCountries = [...countries ];\n    mutableCountries[idx][medalName].page_value += (1 * factor);\n    setCountries(mutableCountries);\n  }\n  \n  const getAllMedalsTotal = () => {\n    let sum = 0;\n    medals.current.forEach(medal => { sum += countries.reduce((a, b) => a + b[medal.name].page_value, 0); });\n    return sum;\n  }\n  return (\n    <React.Fragment>\n      <div className='appHeading'>\n        Olympic Medals\n        <span className='badge'>\n          { getAllMedalsTotal() }\n        </span>\n      </div>\n      <div className='countries'>\n          { countries.map(country => \n            <Country \n              key={ country.id } \n              country={ country } \n              medals={ medals.current }\n              onDelete={ handleDelete }\n              onSave={ handleSave }\n              onReset={ handleReset }\n              onIncrement={ handleIncrement } \n              onDecrement={ handleDecrement } />\n          )}\n      </div>\n      <NewCountry onAdd={ handleAdd } />\n    </React.Fragment>\n  );\n}\n \nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}